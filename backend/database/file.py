from database.utiles import *
from sqlalchemy import DateTime, ForeignKey, select
from sqlalchemy.orm import relationship
from datetime import datetime
from fastapi import HTTPException
from sqlalchemy.exc import SQLAlchemyError

import os
from random import choice

# üîó –ú–æ–¥–µ–ª—å DBFile –∑ –ø—Ä–∏–≤'—è–∑–∫–æ—é –¥–æ Worker
class DBFile(Base):
    __tablename__ = 'dbfile'
    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False)
    path = Column(String(100), nullable=False)
    datetime = Column(DateTime, nullable=False, default=datetime.utcnow)
    description = Column(String(100), nullable=True)

    # –ó–æ–≤–Ω—ñ—à–Ω—ñ–π –∫–ª—é—á –Ω–∞ Worker
    creator_id = Column(Integer, ForeignKey('worker.id'), nullable=False)
    
    # –ó–≤‚Äô—è–∑–æ–∫ –¥–æ Worker
    creator = relationship("Worker", back_populates="files")

    def __init__(self, name, path, datetime, description, creator_id):
        self.name = name
        self.path = path
        self.datetime = datetime
        self.description = description
        self.creator_id = creator_id

    def __str__(self):
        return f"{self.name}, {self.datetime}, {self.description[:20]}"


# üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏
def get_all_files():
    session = get_session()
    try:
        result = session.execute(select(DBFile)).scalars().all()
        return result
    except SQLAlchemyError as e:
        print(f"‚ùå Error fetching all files: {e}")
        return []
    finally:
        session.close()


# üîç –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª –ø–æ ID
def get_file(id):
    session = get_session()
    try:
        return session.query(DBFile).filter_by(id=id).first()
    except SQLAlchemyError as e:
        print(e)
        return None
    finally:
        session.close()


# ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª (–∑ –¥–∏—Å–∫—É —ñ –ë–î)
def delete_file(file_id):
    session = get_session()
    try:
        file_obj = session.query(DBFile).filter_by(id=file_id).first()
        if not file_obj:
            raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
        if os.path.exists(file_obj.path):
            try:
                os.remove(file_obj.path)
            except Exception as e:
                raise HTTPException(status_code=500, detail=f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª –∑ –¥–∏—Å–∫–∞: {e}")
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª {file_obj.path} –Ω–µ —ñ—Å–Ω—É—î –Ω–∞ –¥–∏—Å–∫—É ‚Äî –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ –ª–∏—à–µ –∑ –±–∞–∑–∏")
        session.delete(file_obj)
        session.commit()
        return True
    except SQLAlchemyError as db_err:
        session.rollback()
        print(f"‚ùå DB error while deleting file ID {file_id}: {db_err}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—ñ–¥ —á–∞—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É")
    finally:
        session.close()


# üß™ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ñ–µ–π–∫–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤
def start_generate_fake_files():
    session = get_session()
    try:
        workers = session.query(Worker).all()
        if not workers:
            print("‚ö†Ô∏è –ù–µ–º–∞—î –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ —É –±–∞–∑—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤.")
            return

        for i in range(10):
            random_worker = choice(workers)
            new_file = DBFile(
                name=f"Report2025 #{i}",
                path=f"files/report_2025_{i}.pdf",
                datetime=datetime.now(),
                description="–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–≤—ñ—Ç –∑–∞ 2025 —Ä—ñ–∫",
                creator_id=random_worker.id
            )
            session.add(new_file)

        session.commit()
        print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ñ–µ–π–∫–æ–≤—ñ —Ñ–∞–π–ª–∏.")
    except SQLAlchemyError as e:
        session.rollback()
        print(f"‚ùå DB error while generating fake files: {e}")
    finally:
        session.close()
